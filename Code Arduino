#include <BearSSLHelpers.h>
#include <CertStoreBearSSL.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiAP.h>
#include <ESP8266WiFiGeneric.h>
#include <ESP8266WiFiGratuitous.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266WiFiScan.h>
#include <ESP8266WiFiSTA.h>
#include <ESP8266WiFiType.h>
#include <WiFiClient.h>
#include <WiFiClientSecure.h>
#include <WiFiClientSecureAxTLS.h>
#include <WiFiClientSecureBearSSL.h>
#include <WiFiServer.h>
#include <WiFiServerSecure.h>
#include <WiFiServerSecureAxTLS.h>
#include <WiFiServerSecureBearSSL.h>
#include <WiFiUdp.h>

#include <OneWire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
#include <gfxfont.h>
#include <Adafruit_SSD1306.h>
#include <splash.h>
#include <ArduinoJson.h>
#include <DallasTemperature.h>
#include <Wire.h>
#include <SPI.h>
WiFiClient client;

#define sensorCount 2
char* sensorName[] = {"Temp", "Indicator"};
float sensorValues[sensorCount];

#define  Temp 0
#define  Indicator 1


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in 

#define OLED_MOSI   13
#define OLED_CLK   14
#define OLED_DC    2
#define OLED_CS    15
#define OLED_RESET 16

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);



#define ONE_WIRE_BUS 5
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature ds(&oneWire);


char ssid[] = "UfaNet_25a";
char pass[] = "83021015";

// ThingWorx
char iot_server[] = "192.168.0.104";
IPAddress iot_address(192, 168, 0, 104);
char appKey[] = "ac17b062-8f7e-4869-860a-4d605876cd35";
char thingName[] = "Kyrsovaya_Mokhova";
char serviceName[] = "InputOutput";

// Timer
long timer_iot_timeout = 0;
#define TIMEOUT 1000 // 1 second timout
#define IOT_TIMEOUT1 5000
#define IOT_TIMEOUT2 100
unsigned long timer_thingworx = 0;
unsigned long timer_print = 0;
unsigned long timer_auto = 0;
unsigned long timer_sensors = 0;


#define BUFF_LENGTH 256
char buff[BUFF_LENGTH] = "";
int btn_state = 0;
int auto_control = 0;


void setup() {
  Serial.begin(115200);

  Serial.println("Conecting to WiFi");
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println(".");
  }
  Serial.println("Local IP:");
  Serial.println(WiFi.localIP());

  display.begin(SSD1306_SWITCHCAPVCC);
  display.clearDisplay();
  display.setCursor(0,0);
  ds.begin();
  }


void GetTemp() {
  ds.requestTemperatures();
  sensorValues[Temp] = ds.getTempCByIndex(0);

 // Serial.print(ds.getTempCByIndex(sensorValues[Temp]));
   Serial.print("Celsius temperature: ");
 
  Serial.println(sensorValues[Temp]);
  delay(1000);
  }

void printData()
{
  Serial.println("Обработанные данные:");
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("sensorValues[Temp]");
  display.setCursor(0, 50);
  //sensorValues[Indicator] = sensorValues[Temp]; 
  print_line();
  Serial.println();
}
void print_line() {
  display.setTextSize(1);
  for (int i = 0; i < sensorValues[Indicator]; i++)
  {
    display.print("*");
    Serial.print("*");
    display.display();
  }
 }
void lcd_printstr(String str1)
{
  for (int i = 0; i < str1.length(); i++)
  {
    display.print(str1.charAt(i));
  }
}

void sendThingWorxStream()
{
  
  Serial.println("Connecting to IoT server...");
  if (client.connect(iot_address, 80))
  {
    
    if (client.connected())
    {
      
      Serial.println("Sending data to IoT server...\n");
      Serial.print("POST/Thingworx/Things/");  
      client.print("POST/Thingworx/Things/");
      Serial.print(thingName);  
      client.print(thingName);
      Serial.print("/Services/"); 
      client.print("/Services/");
      Serial.print(serviceName); 
      client.print(serviceName);
      Serial.print("?appKey="); 
      client.print("?appKey=");
      Serial.print(appKey); 
      client.print(appKey);
      Serial.print("&method=post&x-thingworx-session=true");  
      client.print("&method=post&x-thingworx-session=true");

      
      Serial.println();
      Serial.println("Отправляем данные:");
      Serial.print("&"); 
      client.print("&"); 
      Serial.print(sensorName[0]); 
      client.print(sensorName[0]);
      Serial.print("="); 
      client.print("="); 
      Serial.print(sensorValues[0]); 
      client.print(sensorValues[0]);
      Serial.println();
      client.println(" HTTP/1.1"); 
      client.println("Accept: application/json");  
      client.print("Host: "); 
      client.println(iot_server);  
      client.println("Content-Type: application/json");  
      client.println();

      
      timer_iot_timeout = millis();
      while ((client.available() == 0) && (millis() < timer_iot_timeout + IOT_TIMEOUT1)) {
        delay(10);
      }

     
      int iii = 0;
      bool currentLineIsBlank = true;
      bool flagJSON = false;
      timer_iot_timeout = millis();
      while ((millis() < timer_iot_timeout + IOT_TIMEOUT2) && (client.connected()))
      {
        while (client.available() > 0)
        {
          char symb = client.read();
          //Serial.print(symb);
          if (symb == '{')
          {
            flagJSON = true;
          }
          else if (symb == '}')
          {
            flagJSON = false;
          }
          if (flagJSON == true)
          {
            buff[iii] = symb;
            iii ++;
          }
          delay(10);
          timer_iot_timeout = millis();
        }
        delay(10);
      }
      buff[iii] = '}';
      buff[iii + 1] = '\0';

      Serial.println(buff);
      StaticJsonBuffer <BUFF_LENGTH> jsonBuffer;
      JsonObject& json_array = jsonBuffer.parseObject(buff);
      sensorValues[Indicator] = json_array["Indicator"];
      client.stop();
    }
  }
}
void loop() {
  GetTemp();
  sendThingWorxStream();
  printData();
  delay(1000);
}
